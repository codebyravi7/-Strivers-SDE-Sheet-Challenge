#include <bits/stdc++.h> 

long long merge(long long arr[], int low, int mid, int high)
{
    long long count = 0;
    int temp[high - low + 1];
    int left = low;
    int right = mid + 1;
    int p = 0;

    while (left <= mid && right <= high)
    {

        if (arr[left] <= arr[right])
            temp[p++] = arr[left++];

        else if (arr[left] > arr[right])
        {
            temp[p++] = arr[right++];
            count += mid - left + 1;
        }
    }

    while (left <= mid)
        temp[p++] = arr[left++];

    while (right <= high)
        temp[p++] = arr[right++];

    for (int i = low; i <= high; i++)
        arr[i] = temp[i - low];

    return count;
}
long long mergeSort(long long arr[], int low, int high)
{
    long long count = 0;
    if (low >= high)
        return count;
    int mid = (low + high) / 2;
    count += mergeSort(arr, low, mid);
    count += mergeSort(arr, mid + 1, high);
    count += merge(arr, low, mid, high);
    return count;
}
long long getInversions(long long *arr, int n){
    // Write your code here.
    // O(n^2)
    // long long count =0;
    // for(int i=0;i<n;i++){
    //     for(int j=i+1;j<n;j++){
    //         if(arr[i]>arr[j])
    //         count++;
    //     }
    // }
    // return count;

   return mergeSort(arr,0,n-1);
    
}
