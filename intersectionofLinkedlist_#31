/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    int findLength(ListNode *h){
        int cnt =0;
        while(h){
            h=h->next;
            cnt++;
        }
        return cnt;
    }
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int l1 = findLength(headA);
        int l2 = findLength(headB);
        ListNode * p1 =headA;
        ListNode * p2 =headB;

        if(l1>l2){
            while(l1>l2){
                p1 =p1->next;
                l2++;
            }
        }
        else if(l2>l1){
            while(l2>l1){
                p2 =p2->next;
                l1++;
            }
        }
        while(p1 && p2){
            if(p1==p2)
             return p1;
            p1= p1->next;
            p2= p2->next;
        }
        return NULL;
    }
};/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    int findLength(ListNode *h){
        int cnt =0;
        while(h){
            h=h->next;
            cnt++;
        }
        return cnt;
    }
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int l1 = findLength(headA);
        int l2 = findLength(headB);
        ListNode * p1 =headA;
        ListNode * p2 =headB;

        if(l1>l2){
            while(l1>l2){
                p1 =p1->next;
                l2++;
            }
        }
        else if(l2>l1){
            while(l2>l1){
                p2 =p2->next;
                l1++;
            }
        }
        while(p1 && p2){
            if(p1==p2)
             return p1;
            p1= p1->next;
            p2= p2->next;
        }
        return NULL;
    }
};
