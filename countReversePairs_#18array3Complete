class Solution {
public:
    void merge(vector<int> &arr, int low, int mid, int high)
{
    int temp[high - low + 1];
    int left = low;
    int right = mid + 1;
    int p = 0;

    while (left <= mid && right <= high)
    {

        if (arr[left] <= arr[right])
            temp[p++] = arr[left++];

        else if (arr[left] > arr[right])
            temp[p++] = arr[right++];
    }

    while (left <= mid)
        temp[p++] = arr[left++];

    while (right <= high)
        temp[p++] = arr[right++];

    for (int i = low; i <= high; i++)
        arr[i] = temp[i - low];
}
void countInversion(vector<int> &arr, int low, int mid, int high, int &count)
{
    int right = mid + 1;
    for (int i = low; i <= mid; i++)
    {

        while (right <= high && (long)arr[i] > (long)2*arr[right])right++;
        count += right - (mid + 1);
    }
}
void mergeSort(vector<int> &arr, int low, int high, int &count)
{
    if (low >= high)
        return;
    int mid = (low + high) / 2;
    mergeSort(arr, low, mid, count);
    mergeSort(arr, mid + 1, high, count);
    countInversion(arr, low, mid, high, count);
    merge(arr, low, mid, high);
}

int reversePairs(vector<int> &nums)
{
    int count = 0;
    mergeSort(nums, 0, nums.size() - 1, count);
    return count;
}
};
